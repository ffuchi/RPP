import asyncio
import logging
import os
import psycopg2
from aiogram import Dispatcher, Bot, Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, BotCommand, BotCommandScopeDefault

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = psycopg2.connect(
    database="rpp5",
    user="admin_rpp5",
    password="123",
    host="127.0.0.1")

cursor = conn.cursor()
router = Router()

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã admins
cursor.execute("SELECT * FROM admins")
print(cursor.fetchall())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
def get_keyboard(is_admin):
    buttons = [
        KeyboardButton(text="/start"),
        KeyboardButton(text="/get_currencies"),
        KeyboardButton(text="/convert")
    ]
    if is_admin:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        buttons.insert(1, KeyboardButton(text="/manage_currency"))
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[buttons])

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ "get_keyboard".
    return keyboard


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command('start'))
# –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–º–µ–Ω–µ–º "start", –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç "message" —Ç–∏–ø–∞ "Message".
async def start(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    cursor.execute("SELECT id FROM admins WHERE id = %s", (message.chat.id,))
    is_admin = bool(cursor.fetchone())
    if is_admin:
        greeting = "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëã\n\n"
    else:
        greeting = "–ü—Ä–∏–≤–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! üëã\n\n"
    await message.answer(greeting, reply_markup=get_keyboard(is_admin))


# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
class CurrencyManagement(StatesGroup):
    waiting_for_currency_name = State()
    waiting_for_currency_rate = State()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(chat_id):
    cursor.execute("SELECT id FROM admins WHERE id = %s", (str(chat_id),))
    return bool(cursor.fetchone())


# –ö–æ–º–∞–Ω–¥–∞ /manage_currency
@router.message(Command('manage_currency'))
async def manage_currency(message: Message, state: FSMContext):
    if not is_admin(message.chat.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return

    kb = [
        [types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É")],
        [types.KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É")],
        [types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É")
async def add_currency_command(message: Message, state:FSMContext):
    if not is_admin(message.chat.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
    await state.update_data(action="–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É")
    await state.set_state(CurrencyManagement.waiting_for_currency_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã")
async def update_currency_command(message: Message, state:FSMContext):
    if not is_admin(message.chat.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
    await state.update_data(action="–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã")
    await state.set_state(CurrencyManagement.waiting_for_currency_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É")
async def delete_currency_command(message: Message, state:FSMContext):
    if not is_admin(message.chat.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
    await state.update_data(action="–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É")
    await state.set_state(CurrencyManagement.waiting_for_currency_name)

# –ö–æ–º–∞–Ω–¥–∞ /get_currencies (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
@router.message(Command('get_currencies'))
async def get_currencies(message: Message):
    with conn.cursor() as cursor:
        cursor.execute("SELECT currency_name, rate FROM currencies")  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        currencies = cursor.fetchall()

        if not currencies:
            await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç.")
        else:
            response = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã:\n\n"
            for currency in currencies:
                currency_name, rate = currency  # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä—Ç–µ–∂
                response += f"{currency_name}: {rate} RUB\n"
            await message.answer(response)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
@router.message(CurrencyManagement.waiting_for_currency_name)
async def get_currency_name(message: Message, state: FSMContext):
    currency_name = message.text.upper()
    data = await state.get_data()
    action = data.get('action')
    await state.update_data(currency_name=currency_name)

    if action == "–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É":
        with conn.cursor() as cursor:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
            cursor.execute(f"SELECT * FROM currencies WHERE currency_name = '{currency_name}'")
            if cursor.fetchone():
                await message.answer("–î–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                await state.clear()
                return
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –∫ —Ä—É–±–ª—é:")
            await state.set_state(CurrencyManagement.waiting_for_currency_rate)
    elif action == "–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É":
        with conn.cursor() as cursor:
            cursor.execute(f"DELETE FROM currencies WHERE currency_name = '{currency_name}'")
            conn.commit()
            await message.answer(f"–í–∞–ª—é—Ç–∞: {currency_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            await state.clear()
    elif action == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –∫ —Ä—É–±–ª—é:")
        await state.set_state(CurrencyManagement.waiting_for_currency_rate)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
@router.message(CurrencyManagement.waiting_for_currency_rate)
async def get_currency_rate(message: Message, state: FSMContext):
    try:
        currency_rate = float(message.text)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    action = data.get('action')
    currency_name = data.get('currency_name')

    with conn.cursor() as cursor:
        if action == "–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É":
            cursor.execute(f"INSERT INTO currencies (currency_name, rate) VALUES ('{currency_name}', {currency_rate});")
            conn.commit()
            await message.answer(f"–í–∞–ª—é—Ç–∞: {currency_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        elif action == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã":
            cursor.execute(f"UPDATE currencies SET rate = {currency_rate} WHERE currency_name = '{currency_name}';")
            conn.commit()
            await message.answer(f"–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã {currency_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")

    await state.clear()

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
class CurrencyConversion(StatesGroup):
    waiting_for_currency_name = State()
    waiting_for_amount = State()

# –ö–æ–º–∞–Ω–¥–∞ /convert (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º)
@router.message(Command('convert'))
async def convert_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
    await state.set_state(CurrencyConversion.waiting_for_currency_name)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
@router.message(CurrencyConversion.waiting_for_currency_name)
async def get_currency_name_for_conversion(message: Message, state: FSMContext):
    currency_name = message.text.upper()
    await state.update_data(currency_name=currency_name)

    with conn.cursor() as cursor:
        cursor.execute("SELECT rate FROM currencies WHERE currency_name = %s", (currency_name,))
        currency_data = cursor.fetchone()

        if not currency_data:
            await message.answer("–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
        else:
            await state.update_data(currency_data=currency_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
            await state.set_state(CurrencyConversion.waiting_for_amount)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –∏ —Ä–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
@router.message(CurrencyConversion.waiting_for_amount)
async def get_amount_and_convert(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    currency_name = data['currency_name']
    rate = data['currency_data'][0]  # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
    result = amount * float(rate)

    await message.answer(f"{amount} {currency_name} = {result:.2f} RUB")
    await state.clear()


user_command = [
    BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
    BotCommand(command="/convert", description="–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É"),
    BotCommand(command="/get_currencies", description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–ª—é—Ç")]

admin_command = [
    BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
    BotCommand(command="/convert", description="–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É"),
    BotCommand(command="/manage_currency", description="–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É"),
    BotCommand(command="/get_currencies", description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–ª—é—Ç")]

ADMIN_ID = ['762606808']

async def main():
    bot_token = os.getenv('API_TOKEN')
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–ª –≤ –ë–æ—Ç–§–∞–∑–µ—Ä –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
    bot = Bot(token=bot_token)
    await bot.set_my_commands(user_command, scope=BotCommandScopeDefault())

    for admin in ADMIN_ID:
        await bot.set_my_commands(admin_command, scope=BotCommandScopeDefault(id=admin))
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
    # dp.middleware.setup(LoggingMiddleware())
cursor.close()
conn.close()
